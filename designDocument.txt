Design document for c compiler

--- Instructions on how to run --- 
python compiler.py -t -p testFiles/sampleFile.c > output.txt

***  NOTE sampleFile.c represents some c program in testFiles ***  

VALID TOKENS:

Keywords:
    types => 'int' | 'double' | 'float'
    modifiers => 'unsigned' | 'long' | 'short'
    itrs = 'if' | 'for' | 'while' | 'switch' | 'do'
    controlStmts = 'return' | 'break'  

NUMBER => Integer or Float

ID     => Identifiers

Period => '.'

Comma  => ','

END    => statement terminator => ';'

HASH   => '#'

LPAREN => '('

RPAREN => ')'

LBRACE => '{'

RBRACE => '}'

LBRACK => '['

RBRACK => ']'

SQUOTE => single quote

DQUOTE => double quote

ASSIGN_OPS => '=' | '+=' | '-=' | '*=' | '/=' |'%=' | '^='

PREFIX_OP =>  '++' | '--' 

MATH_OP   => '+' | '-' | '*' | '/' | '%'

RELAT_OP  => '<=' | '>=' | '!=' | '>' | '<' | '=='

LOGICAL_OP => '&&' | '!' | '||' 

BITWISE_OP =>  '&' | '|' | '<<' | '>>' | '~' | '^'

TERNARY_OP => '?:'

NEWLINE => '\n'

SKIP => ' ' | '\t' => at least one space or tab

MISMATCH => any other character

Grammar:

Program:
    translation-unit

translation-unit:
    external-declaration translation-unit

external-declaration:
    declaration
    function-definition

function-definition:
    type-specifier ID (parameter-list) compound-statement

parameter-list:
    parameter-declaration parameter-list'

parameter-list':
    , parameter-declaration parameter-list'
    epsilon

parameter-declaration:
    type-specifier ID

compound-statement:
    { block-item-list }

block-item-list:
    block-item block-item-list
    epsilon

block-item:
    declaration
    statement

declaration:
    type-specifier init-declarator;

init-declarator:
    ID
    ID = expr
   
statement:
    assignment-statement
    return-statement

assignment-statement:
    ID = expr;

Expr -> Term Expr'

Expr' -> + Term Expr' | - Term Expr' | epsilon

Term -> Factor Term' 

Term' -> * Factor Term' | / Factor Term' | epsilon

Factor -> ( Expr )  | num  | ID

return-statement:
    return expr;

Tree:
	Parse Tree (used to fill symbol table during parsing)
    AST (used after parser)

Optimization methods:
    SSA 
    deadcode removal
    constant propagation
    constant folding

x86:
Can support all math operations:
    ADD
    SUB
    DIV
    MULT

Comments:
	Used C11 handbook provided on Canvas to help me restructure the grammar
	Can generate assembly for mutliple functions but cannot support function calls
    Can support global variables in the parser phase but do not add them to symbol table
    Can support parameters up to assembler
    have great error handling for expressions
    I do support complex expressions 
    I do not support any kind of control flow
    pretty printing for the parser, three address code, optimizer, and assembly is a plus
    Cannot support negative numbers in the parser phase

