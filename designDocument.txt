Design document for c compiler

--- Instructions on how to run --- 
python compiler.py -t -p testFiles/sampleFile.c > output.txt

***  NOTE sampleFile.c represents some c program in testFiles ***  

VALID TOKENS:

Keywords:
    types => 'int' | 'double' | 'float'
    modifiers => 'unsigned' | 'long' | 'short'
    itrs = 'if' | 'for' | 'while' | 'switch' | 'do'
    controlStmts = 'return' | 'break'  

NUMBER => Integer or Float

ID     => Identifiers

Period => '.'

Comma  => ','

END    => statement terminator => ';'

HASH   => '#'

LPAREN => '('

RPAREN => ')'

LBRACE => '{'

RBRACE => '}'

LBRACK => '['

RBRACK => ']'

SQUOTE => single quote

DQUOTE => double quote

ASSIGN_OPS => '=' | '+=' | '-=' | '*=' | '/=' |'%=' | '^='

PREFIX_OP =>  '++' | '--' 

MATH_OP   => '+' | '-' | '*' | '/' | '%'

RELAT_OP  => '<=' | '>=' | '!=' | '>' | '<' | '=='

LOGICAL_OP => '&&' | '!' | '||' 

BITWISE_OP =>  '&' | '|' | '<<' | '>>' | '~' | '^'

TERNARY_OP => '?:'

NEWLINE => '\n'

SKIP => ' ' | '\t' => at least one space or tab

MISMATCH => any other character


Grammar:

program: 
	declarations

declarations:
	external-declaration 	

external-declaration:
	function-definition
	declaration
	
declaration:
	declaration-specifiers init-declarator-listopt ;

declaration-specifiers:
	type-specifier declaration-specifiers
 
init-declarator-list:
	init-declarator
	init-declarator-list , init-declarator

init-declarator:
	declarator
	declarator = initializer

function-definition:
	declaration-specifiers declarator declaration-listopt compound-statement

declaration-list:
	declaration
	declaration-list declaration

declarator:
	direct-declarator

direct-declarator:
	
	identifier (identifier-listopt)

identifier-list:
	identifier
	identifier-list , identifier

compound-statement:
	{ block-item-list }


block-item-list:
	block-item
	block-item-list block-item

block-item:
	declaration
	statement

statement:
	jump-statement

jump-statement:
	return expressionopt;

expression:
	assignment-expression
	expression , assignment-expression

assignment-expression:
	conditional-expression
	unary-expression assignment-operator assignment-expression

unary-expression:
	postfix-expression
	++ unary-expression
	-- unary-expression

postfix-expression:
	primary-expression
	postfix-expression [ expression ]
	postfix-expression ( argument-expression-listopt )
	postfix-expression . identifier
	postfix-expression -> identifier
	postfix-expression ++
	postfix-expression --
	( type-name ) { initializer-list }
	( type-name ) { initializer-list , }

primary-expression:
	identifier
	constant
	string-literal
	( expression )


assignment-operator:
	= | *= | /= | %= | += | -= | <<= | >>= | &= | ^= | |=

unary-operator:
	& | * | + | - | ~ | !

expression-statement:
	expressionopt ;

constant-expression:
	conditional-expression


Expr -> Term Expr'

Expr' -> + Term Expr' | - Term Expr' | epsilon

Term -> Factor Term' 

Term' -> * Factor Term' | / Factor Term' | epsilon

Factor -> ( Expr )  | num  | ID 



Grammar:

Expr -> Expr + Term  | Expr - Term  | Term

Term -> Term * Factor  | Term / Factor  | Factor

Factor -> ( Expr )  | num  | ID


eliminate left recursion

Expr -> Term Expr'

Expr' -> + Term Expr' | - Term Expr' | epsilon

Term -> Factor Term' 

Term' -> * Factor Term' | / Factor Term' | epsilon

Factor -> ( Expr )  | num  | ID







