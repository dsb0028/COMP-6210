Design document for c compiler

--- Instructions on how to run --- 
python compiler.py -t -p testFiles/sampleFile.c > output.txt

***  NOTE sampleFile.c represents some c program in testFiles ***  

VALID TOKENS:

Keywords:
    types => 'int' | 'double' | 'float'
    modifiers => 'unsigned' | 'long' | 'short'
    itrs = 'if' | 'for' | 'while' | 'switch' | 'do'
    controlStmts = 'return' | 'break'  

NUMBER => Integer or Float

ID     => Identifiers

Period => '.'

Comma  => ','

END    => statement terminator => ';'

HASH   => '#'

LPAREN => '('

RPAREN => ')'

LBRACE => '{'

RBRACE => '}'

LBRACK => '['

RBRACK => ']'

SQUOTE => single quote

DQUOTE => double quote

ASSIGN_OPS => '=' | '+=' | '-=' | '*=' | '/=' |'%=' | '^='

PREFIX_OP =>  '++' | '--' 

MATH_OP   => '+' | '-' | '*' | '/' | '%'

RELAT_OP  => '<=' | '>=' | '!=' | '>' | '<' | '=='

LOGICAL_OP => '&&' | '!' | '||' 

BITWISE_OP =>  '&' | '|' | '<<' | '>>' | '~' | '^'

TERNARY_OP => '?:'

NEWLINE => '\n'

SKIP => ' ' | '\t' => at least one space or tab

MISMATCH => any other character

Grammar:

Program:
    translation-unit

translation-unit:
    external-declaration external-declaration'

external-declaration:
    declaration
    function-definition

external-declaration':
    external-declaration external-declaration'
    epsilon
    
declaration:
    declaration-specifiers init-declarator-list;
    ID initital-declarator;
    epsilon

declaration-specifiers:
    type-specifier declaration-specifers'

declaration-specifiers':
    declaration-specifiers declaration-specifiers'
    epsilon
    
init-declarator-list:
    init-declarator init-declarator-list' 
    epsilon

init-declarator-list':
    , init-declarator-list init-declarator-list'
    epsilon  

init-declarator:
    declarator
    declarator = initializer

initializer:
    assignment-expression
  
assignment-expression:
    conditional-expression

conditional-expression:
    logical-OR-expression

logical-OR-expression;
    logical-AND-expression

logical-AND-expression:
    inclusive-OR-expression

inclusive-OR-expression:
    exclusive-OR-expression

exclusive-OR-expression:
    AND-expression

AND-expression:
    equality-expression

equality-expression:
    relational-expression

relational-expression:
    shift-expression

shift-expression:
    additive-expression

additive-expression:
    multiplicative-expression additive-expression'
   
additive-expression':
    + multiplicative-expression additive-expression'
    - multiplicatice-expression additive-expression'
    epsilon
        
multiplicative-expression:
    cast-expression multiplicative-expresssion'
  
multiplicative-expresssion':
    * cast-expression multiplicative-expresssion'
    / cast-expression multiplicative-expresssion'
    % cast-expression multiplicative-expresssion'
    epsilon

cast-expression:
    unary-expression

expression:
    assignment-expression 
    epsilon
    
unary-expression:
    postfix-expression

postfix-expression:
    primary-expression

primary-expression:
    identifier
    constant
    string-literal
    ( expression )
    
declarator:
    pointer direct-declarator

pointer:
    epsilon

function-definition:
    declaration-specifiers declarator declaration-list compound-statement

compound-statement:
    { block-item-list }

block-item-list:
    block-item block-item-list
    epsilon

block-item:
    declaration
    statement

statement:
    compound-statement
    jump-statement

jump-statement:
    return expressionopt;
    
declaration-list:
    declaration declaration-list
    epsilon

direct-declarator:
    identifer direct-declarator'
    (declarator) direct-declarator'

direct-declarator':
    (parameter-type-list)
    (identifer-list)
    epsilon

parameter-type-list:
    parameter-list
    parameter-list, ...

parameter-list:
    parameter-declaration parameter-list'

parameter-declaration:
    declaration-specifers declarator

identifier-list:
    identifier identifier-list'

identifer-list':
    , identifer identifier-list'



Tree:
	Parse Tree


Comments:
	Used C11 handbook provided on Canvas to help me restructure the grammar
	Symbol Table will only be correct when there are 0 or 1 parameters.
	Symbol Table will not contain variables defined inside of a function
	Parse Tree does not support functions that have a return type of char
	Parse Tree will support functions that either have a return type of int, float, or double
	Error handling has not been fully implemented
	Had to restructure grammar so it can be further expanded to support more things
	function-definition cannot support identifier-lists in the declarator due to bug in code.
	function-definition can only support parameter-type-list inside of declarator
	can not produce valid parse tree if source file contains more than one function
	Having strange issue where the tokenbuffer will suddenly contain the tokens from compound statment when the subtree for external declaration is added to translation-unit
	I am getting the correct parse trees. It's a very strange bug. 

